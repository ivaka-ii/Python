=====================================================
              Basic information
=====================================================
del [variable]      --deletes given variable
variable name           -- contains letters, numbers and underscore, it shouldn't be keyword from Python
                        don't contain space, don't start with number, they are case sensitive
ord('variable')			--gives the number of variable to ASCII code
chr('number of char')		--gives the character from the number of the ACII code

var=eval(input("Enter your number: "))	-- always use eval function whenever there is a number, not a string

types of data
----------------------------------------------------
int, float, complex
strings
boolean

basic operations on strings
----------------------------------------------------
x = "string"
y = x.lower() 
print(y)                        -- prints the string with lower cases
.upper                          -- prints the string with all capital letters
dir([variable])                 -- prints the varios commands on the string
.is[operation]([variable])      -- returns booleans checking the output result
z ="-".join(x)                  -- print s-t-r-i-n-g, special characters can be used also
print(x.center(20))             --prints up the string centrelized with the defined spaces in the brackets
print(x.zfill(10))              --prints up the string with filled 0s in the defined brackets's space

stripe, split operations
----------------------------------------------------
[variable] = "[string]"

print([variable].strip(' '))     --this operation strips(deletes) from the variable at the begining or the end
print([variable].lstrip(' '))    --this operation strips(deletes) from the variable from the left
print([variable].rstrip(' '))    --this operation strips(deletes) from the variable from the right
[variable].strip('').strip('')   -- performs multiple strip operations
[variable].split()               -- performs SPLIT operations and it gives LIST format of the files
[variable].split('string')       -- performs split operation and excludes the string from the output  

count,index and find operations
----------------------------------------------------
[variable] = "[string]"

[variable].count('[character\word]')			-- prints how many characters are in the [variable]'s string

[variable].index('[character\word]')			-- prints in which index the character is located
[variable].index('[character\word],[index]')	-- prints the number of index of character after the pointed [index]

[variable].find('[character\word]')				-- similar to index operation
[variable].find('[character\word],[index]')		-- show where in the [string] is the character\word after the [index]
!if the find operation is giving you '-1'		-- this tells you that there is no such character\word

!mode				-- shows information about the terminal window in windows
!tput col			-- shows information about the number of colums in Linux

!you can transition from numbers -> strings or booleans
!you can save f""(format) with strings and variables into 1 variable and then print it

'''
code block        -- multiple line commenting
'''

                    print
----------------------------------------------------
print()         --prints anything in the braces
print(f"")      -- print text with stored variables with format
print("... \n ...")  -- print text in new line
print("... \b ...")  -- print with backspace (not always)
print("... \t ...")  -- print with tab
print('... \' ...')  -- print with escaping character to be treated as quotation
print('... \a' ...')  -- print with alerting sound

print(type(variable))      -- prints the type of a variable
print(id(variable))         -- prints the location in the memory of the variable
print("{}\n{}\n{}".format(var1,var2,var3))        -- prints variables in {} with unique characters(new line)

====================================================
					Operators
====================================================
Operators are the pillars for any language.
The operator can be defined as a symbol which is responsibe for a particular operation between two operands.
Operands may be values or variables or combination of both.
Python provides variety of operators described as follows:
-Arithmetic Operators	}    Takes values as inputs, performs its operation on input values and gives values as output
-Assignment Operators	}
-Comparison Operators		}	Takes values as inputs, perform its operation on input values
-Identity Operators			}	and gives output as either True or False
-Membership Operators		}
-Logical Operators		} Takes True or False as inputs, performs operation on this inputs and give output as either True or False
-Bitwise Operators			} Takes values as input, performs operations on its binary representation and gives output as a value


				Arithmetic Operators
----------------------------------------------------
Exponential**			-- 5**3 = 5*5*5
Modulo%					-- 7%2 = 1; 8%2=0
Floor division//		-- it gives the lower integer from float result (7//2=3;-9//2=-5)

                Assignment Operators
----------------------------------------------------
=	+=	-=	*=	/=	  %/ 
a += b 	==   a+b		


				Comparison Operators
----------------------------------------------------
>	<	>=		<= 		!= (not equal to)		==(equal)


			Identity and Membership Operators
----------------------------------------------------
Identity operators are used to find the type of: class/type/object.
There are two types of Identity operators:
	-is
	-is not
	
Membership operators are used to validate the membership of a value
There are two types of Membership operators:
	-in
	-not in
Ex.:
valid_java=['1,6','1.7','1,8','1,9'] 
host_java="1.5"

if host_java in valid_java:
	print("host consist of valid java version")
else:
	print("host consist of invalid java version")


					Logical Operators
----------------------------------------------------
Logical operators are useful to combine multiple conditions
They are thee type of logical operators in python:
They are:
	-and			-- if anyone of the conditions is False, the result is also False
	-or				-- if anyone of the conditions is True, the result is also True
	-not			-- not True ==> False, not False ==> True 
	
Mutiple logical operator:
all([1condtition,2condition,3condition,4condition])		all==and between all conditions
any([1condtition,2condition,3condition,4condition])		all==or between all conditions


=====================================================
		Conditions
=====================================================
if False:
	--won't print nothing into the code

if True or var1 == "var1":
	--prints the block code
	
if one {statement} is == True:
	print("Text")
elif one {statement} is something else:
	print("Text2")
elif ..... :
	print("Text3")
else everything else:
	print("Text4")

=====================================================
			Exception handling
=====================================================
A Python program terminates as soon as it encounters an error
errors are two types:
-syntax errors : no way to handle syntax errors
-Runtime errors  --> exceptions, There is a way to handle those exceptions
!We are handling exceptions with codint "try" and "except" block


			working with exceptions
----------------------------------------------------
'''
print("Welcome to exceptions concept")
print("Now it is fine")
fo=open("nari.txt")
'''

'''
try:
	fo=open("nari.txt")
	print(fo.read())
	fo.close()
except Exception as e:
	print(e)
	'''

my_list=[3,4,5]

'''

try:
	print(my_list[4])
except Exception as e:
	print(e)
'''

#print(my_list[4])

#print("This code will also execetues")

try:
	import fabric
except Exception as e:
	print(e)


	exceptions handling for known exceptions
----------------------------------------------------
#NameError
#TypeError
#FileNotFoundError
#ZeroDivisionError

try:
	print("This is try block")
	import fabric
	print(a)
	#print(4+"hi")
	#open('asdfas.txt')
	#print(5/0)
	
except FileNotFoundError:
	print("File is not present to open it")
except NameError:
	print("Variable is not defined")
except TypeError:
	print("Adding number and string is not possible")
except ZeroDivisionError:
	print("Division with zero is not possible")
except ModuleNotFoundError:
	print("Please install fabric to use it")
except Exception as e:
	print(e)
finally:
	print("Finally this will executes")
	
		Difference between try except finally and try except else
------------------------------------------------------------------
try:
	a=9
	print(a)
except NameError:
	print("Variable is not defined")
except Exception as e:
	print("Exception occured:",e)
else:
	print("This will execute if there is no exceptions in try block")
finally:
	print("This will executes always")
	
		Raise user defined exception
--------------------------------------------------------------------
'''

age=23

if age>30:
	print("Valid age")
else:
	raise ValueError("Age is less than 30")

'''
age=20

try:
	assert age>30
	print("Valid age")
except AssertionError:
	print("Raised with assert because age is less than 30")
except:
	print("Exception occured")

