=====================================================
				Introduction to OOPS
=====================================================
It is all about: Class, Object, Inheritance, Polymorphism,
Data Abstraction and Data Encapsulation

Object		--could be anything which exist in real-time, like human, fan,
			car,email, any application, jenkins, weblogic, tomcat, apache etc

Each object has characteristics and functions

Class		--is a template/blueprint to create an object
			--is the combination of attributes and methods
			-- we can define Attributes for class and objects 

Why OOP's		--to group related functions(methods)
				-- to create a template/blueprint
				-- OOP's is a concept where characteristics and functions of a real-life object is packaged
				as a single entity in the code
				
					Defining and implementing OOPS
-----------------------------------------------------------------------------------------
import os
class Tomcat:
	def get_details_for_each_tomcat(self,server_xml):
		self.tcf=server_xml
		self.th=os.path.dirname(os.path.dirname(server_xml))
		return None

	def display_details(self):
		print(f'The tomcat config file is: {self.tcf}\nThe tomcat home is: {self.th}')
		return None		

def main():
	tomcat7=Tomcat()
	tomcat9=Tomcat()

	tomcat7.get_details_for_each_tomcat("/home/Automation/tomcat7/conf/server.xml")
	#get_details_for_each_tomcat('tomcat7',"/home/Automation/tomcat7/conf/server.xml")
	tomcat9.get_details_for_each_tomcat("/home/Automation/tomcat9/conf/server.xml")
	#get_details_for_each_tomcat('tomcat9',"/home/Automation/tomcat9/conf/server.xml")
	#print(tomcat9.tcf)
	#print(tomcat7.th)
	#print(tomcat9.th)
	#print(tomcat7.tcf)
	tomcat9.display_details()
	tomcat7.display_details()
	#display_details('tomcat7')
	tomcat9.display_details()
 
	return None

if __name__=="__main__":
	main()


			Class and Object attributes
-----------------------------------------------------------------------------------------
class emp:
	count=0
	def get_name_age_salary(self,name,age,salary):
		self.name=name
		self.age=age 
		self.salary=salary
		self.increase_count_for_emp()
		#self.display_details()
		return None
	def increase_count_for_emp(self):
		emp.count=emp.count+1
		return None
	def display_details(self):
		print(f'The name is: {self.name}\nThe age is: {self.age}\nThe salary is: {self.salary}')
		return None

emp1=emp()
emp2=emp()

emp1.get_name_age_salary('John',34,45000)
#emp1.increase_count_for_emp()
emp2.get_name_age_salary('Cliton',25,54000)
#emp2.increase_count_for_emp()

print(emp.count)


					Constructor of a class
-----------------------------------------------------------------------------------------
A constructor is a special method that is called by default whenever
you create an object from a class.

class Emp(object):
	def __init__(self,name,salary):
		self.name=name
		self.salary=salary
		return None
	def display(self):
		print(f"The name is: {self.name}\nThe salary is: {self.salary}")
		return None		


emp1=Emp('Ramu',56000)
emp2=Emp("Naren",90000)

emp1.display()
#emp2.display()

				Finding home file and configuration files WITH OOPs
-----------------------------------------------------------------------------------------
#!/bin/python3
import os
class Tomcat(object):
    def get_home_conf_file(self,server_xml):
        self.t_home=os.path.dirname(os.path.dirname(server_xml))
        self.conf_file=server_xml
        return None
    def display_details(self):
        print("Tomcat home is: ",self.t_home)
        print("Tomcat conf file is: ",self.conf_file)
        return None

def get_all_tomcats():
    list_of_config_files=[]
    for r,d,f in os.walk("/"):
        for each_file in f:
            if each_file=='server.xml':
                list_of_config_files.append(os.path.join(r,each_file))
    return list_of_config_files
def main():
    print("Finding list of tomcats...")
    list_of_tomcats=get_all_tomcats()
    tomcat_objects=[]
    for each_file in list_of_tomcats:
        tomcat_object=Tomcat()
        tomcat_object.get_home_conf_file(each_file)
        tomcat_objects.append(tomcat_object)
    for each_ob in tomcat_objects:
        each_ob.display_details()

    return None
if __name__ == '__main__':
    main()

			Finding home file and configuration files WITHOUT OOPs
-----------------------------------------------------------------------------------------
#!/bin/python3
import os

def get_all_tomcats():
    list_of_config_files=[]
    for r,d,f in os.walk("/"):
        for each_file in f:
            if each_file=='server.xml':
                list_of_config_files.append(os.path.join(r,each_file))
    return list_of_config_files
def display_details(home_cnf_files):
    for each_key in home_cnf_files.keys():
        print(f'The Tomcat home is: {home_cnf_files[each_key][0]}')
        print(f'The Tomcat config file is:{home_cnf_files[each_key][1]}' )
    return None

def main():
    print("Finding list of tomcats...")
    list_of_tomcats=get_all_tomcats()
    #print(list_of_tomcats)
    cnt=1
    home_cnf_files={}
    for each_config_file in list_of_tomcats:
        t_home=os.path.dirname(os.path.dirname(each_config_file))
        t_cnf_file=each_config_file
        home_cnf_files['tomcat'+str(cnt)]=[t_home,t_cnf_file]
        cnt+=1
    #print(home_cnf_files)
    display_details(home_cnf_files)
    return None


if __name__ == '__main__':
    main()


				Destructor of a class 
-----------------------------------------------------------------------------------------
Destructors are called when an object gets destroyed.
In Python, destructors are not needed as much needed in C++ beacuse Python has a garbage
collector that handles memory management automatically.
The __del__() method is known as a destructor method in Python. It is called when all references 
to the object have been deleted i.e when an object is garbage collected.

class Person(object):
	def __init__(self,name,age):
		print("an object has been created")
		self.name=name
		self.age=age		
		return None
	def __del__(self):
		print("object has been deleted")
		return None


per1=Person('Jhon',26)

				Polymorphism  of Python oops
-----------------------------------------------------------------------------------------
Polymorphism		-- allows us to define same methods in different classes.
This process is also known as Method Overriding.

class Tomcat(object):
	def __init__(self,home,ver):
		self.home=home
		self.version=ver
		return None 
	def display(self):
		print("This is from tocmat class")
		print(self.home)
		print(self.version)
		return None 
class Apache(object):
	def __init__(self,home,ver):
		self.home=home
		self.version=ver
		return None 
	def display(self):
		print("This is from apache class")
		print(self.home)
		print(self.version)
		return None 

tom_ob=Tomcat('/home/tomcat9','7.6')
apa_ob=Apache("/etc/httpd",'2.4')

tom_ob.display()
apa_ob.display()


						Inheritance of Python oops
-----------------------------------------------------------------------------------------					
Inheritance is a mechanism taht allows us to create a new class - known as a child class - that is 
based upon an existing class - the parent class.

Advantage of inheritance
This saves you a lot of time from duplicating a lot of code.


class Tomcat(object):
	def __init__(self,home,ver):
		self.home=home
		self.version=ver
		return None 
	def display(self):
		print(self.home)
		print(self.version)
		return None 
class Apache(Tomcat):
	def __init__(self,home,ver):
		self.home=home
		self.version=ver
		return None 
tom_ob=Tomcat('/home/tomcat9','7.6')
apa_ob=Apache("/etc/httpd",'2.4')


tom_ob.display()
apa_ob.display()


						Encapsulation of OOPs
-----------------------------------------------------------------------------------------
Using OOP in Python, we can restrict access to methods and variables
This prevents data from direct modification which is called encapsulation.

self.___[variable]		-- encapsulates the variable within the class and object.

class Person(object):
	def assing_name_and_age(self,name,age):
		self.name=name
		self.__age=age
		self.__display()
		return None
	def __display(self):
		print(self.name,self.__age)
		return None

per1=Person()
per1.assing_name_and_age('John',32)

#per1.__display()
#print(per1.name)
#print(per1.__age)


